
atmega8-adc-lcd16x2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000838  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  00000838  000008ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      0000005c  00000000  00000000  000008c4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000920  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000c8  00000000  00000000  0000095c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000e57  00000000  00000000  00000a24  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007ce  00000000  00000000  0000187b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000709  00000000  00000000  00002049  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000194  00000000  00000000  00002754  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000046a  00000000  00000000  000028e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000683  00000000  00000000  00002d52  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000088  00000000  00000000  000033d5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	24 c0       	rjmp	.+72     	; 0x4c <__bad_interrupt>
   4:	23 c0       	rjmp	.+70     	; 0x4c <__bad_interrupt>
   6:	22 c0       	rjmp	.+68     	; 0x4c <__bad_interrupt>
   8:	21 c0       	rjmp	.+66     	; 0x4c <__bad_interrupt>
   a:	20 c0       	rjmp	.+64     	; 0x4c <__bad_interrupt>
   c:	1f c0       	rjmp	.+62     	; 0x4c <__bad_interrupt>
   e:	1e c0       	rjmp	.+60     	; 0x4c <__bad_interrupt>
  10:	1d c0       	rjmp	.+58     	; 0x4c <__bad_interrupt>
  12:	1c c0       	rjmp	.+56     	; 0x4c <__bad_interrupt>
  14:	1b c0       	rjmp	.+54     	; 0x4c <__bad_interrupt>
  16:	1a c0       	rjmp	.+52     	; 0x4c <__bad_interrupt>
  18:	19 c0       	rjmp	.+50     	; 0x4c <__bad_interrupt>
  1a:	18 c0       	rjmp	.+48     	; 0x4c <__bad_interrupt>
  1c:	17 c0       	rjmp	.+46     	; 0x4c <__bad_interrupt>
  1e:	16 c0       	rjmp	.+44     	; 0x4c <__bad_interrupt>
  20:	15 c0       	rjmp	.+42     	; 0x4c <__bad_interrupt>
  22:	14 c0       	rjmp	.+40     	; 0x4c <__bad_interrupt>
  24:	13 c0       	rjmp	.+38     	; 0x4c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e8 e3       	ldi	r30, 0x38	; 56
  3a:	f8 e0       	ldi	r31, 0x08	; 8
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	a8 37       	cpi	r26, 0x78	; 120
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>
  48:	cf d0       	rcall	.+414    	; 0x1e8 <main>
  4a:	f4 c3       	rjmp	.+2024   	; 0x834 <_exit>

0000004c <__bad_interrupt>:
  4c:	d9 cf       	rjmp	.-78     	; 0x0 <__vectors>

0000004e <adcInit>:

void adcInit()
{
	// (1 << ADEN) enable adc
	// (1 << ADPS2) | (1 << ADPS1) prescaler f_cpu/64
	ADCSRA |= (1 << ADEN) | (1 << ADPS2) | (1 << ADPS1);
  4e:	86 b1       	in	r24, 0x06	; 6
  50:	86 68       	ori	r24, 0x86	; 134
  52:	86 b9       	out	0x06, r24	; 6
  54:	08 95       	ret

00000056 <adcRead>:
	// (pin & 0xF0) Select pin adc
	// if you use pin 3
	// (3 & 0xF0)
	// (00000011 & 00001111)
	// (00000011)
	ADMUX = (1 << REFS0) | (pin & 0x0F);
  56:	8f 70       	andi	r24, 0x0F	; 15
  58:	80 64       	ori	r24, 0x40	; 64
  5a:	87 b9       	out	0x07, r24	; 7
	
	// start conversion adc
	ADCSRA |= (1 << ADSC);
  5c:	86 b1       	in	r24, 0x06	; 6
  5e:	80 64       	ori	r24, 0x40	; 64
  60:	86 b9       	out	0x06, r24	; 6
	// (!(ADCSRA & (1 << ADIF)))
	// (!(11010110 & 00010000))
	// (!00000000)
	// (!16)
	// (0) -> while stops running
	while(!(ADCSRA & (1 << ADIF)));
  62:	34 9b       	sbis	0x06, 4	; 6
  64:	fe cf       	rjmp	.-4      	; 0x62 <adcRead+0xc>
	
	
	return ADC;	
  66:	84 b1       	in	r24, 0x04	; 4
  68:	95 b1       	in	r25, 0x05	; 5
}
  6a:	08 95       	ret

0000006c <wait_PD>:
}
void lcdClear_PD()
{
	//clear screen lcd
	lcdCommand_PD(0x01);  
	wait_PD();
  6c:	8f e6       	ldi	r24, 0x6F	; 111
  6e:	97 e1       	ldi	r25, 0x17	; 23
  70:	01 97       	sbiw	r24, 0x01	; 1
  72:	f1 f7       	brne	.-4      	; 0x70 <wait_PD+0x4>
  74:	00 c0       	rjmp	.+0      	; 0x76 <wait_PD+0xa>
  76:	00 00       	nop
  78:	08 95       	ret

0000007a <lcdCommand_PD>:
  7a:	cf 93       	push	r28
  7c:	c8 2f       	mov	r28, r24
  7e:	82 b3       	in	r24, 0x12	; 18
  80:	80 7f       	andi	r24, 0xF0	; 240
  82:	9c 2f       	mov	r25, r28
  84:	92 95       	swap	r25
  86:	9f 70       	andi	r25, 0x0F	; 15
  88:	89 2b       	or	r24, r25
  8a:	82 bb       	out	0x12, r24	; 18
  8c:	82 b3       	in	r24, 0x12	; 18
  8e:	8f 7d       	andi	r24, 0xDF	; 223
  90:	82 bb       	out	0x12, r24	; 18
  92:	82 b3       	in	r24, 0x12	; 18
  94:	8f 7e       	andi	r24, 0xEF	; 239
  96:	82 bb       	out	0x12, r24	; 18
  98:	82 b3       	in	r24, 0x12	; 18
  9a:	80 64       	ori	r24, 0x40	; 64
  9c:	82 bb       	out	0x12, r24	; 18
  9e:	e6 df       	rcall	.-52     	; 0x6c <wait_PD>
  a0:	82 b3       	in	r24, 0x12	; 18
  a2:	8f 7b       	andi	r24, 0xBF	; 191
  a4:	82 bb       	out	0x12, r24	; 18
  a6:	e2 df       	rcall	.-60     	; 0x6c <wait_PD>
  a8:	82 b3       	in	r24, 0x12	; 18
  aa:	80 7f       	andi	r24, 0xF0	; 240
  ac:	cf 70       	andi	r28, 0x0F	; 15
  ae:	c8 2b       	or	r28, r24
  b0:	c2 bb       	out	0x12, r28	; 18
  b2:	82 b3       	in	r24, 0x12	; 18
  b4:	80 64       	ori	r24, 0x40	; 64
  b6:	82 bb       	out	0x12, r24	; 18
  b8:	d9 df       	rcall	.-78     	; 0x6c <wait_PD>
  ba:	82 b3       	in	r24, 0x12	; 18
  bc:	8f 7b       	andi	r24, 0xBF	; 191
  be:	82 bb       	out	0x12, r24	; 18
  c0:	d5 df       	rcall	.-86     	; 0x6c <wait_PD>
  c2:	cf 91       	pop	r28
  c4:	08 95       	ret

000000c6 <lcdData_PD>:
  c6:	cf 93       	push	r28
  c8:	c8 2f       	mov	r28, r24
  ca:	82 b3       	in	r24, 0x12	; 18
  cc:	80 7f       	andi	r24, 0xF0	; 240
  ce:	9c 2f       	mov	r25, r28
  d0:	92 95       	swap	r25
  d2:	9f 70       	andi	r25, 0x0F	; 15
  d4:	89 2b       	or	r24, r25
  d6:	82 bb       	out	0x12, r24	; 18
  d8:	82 b3       	in	r24, 0x12	; 18
  da:	8f 7d       	andi	r24, 0xDF	; 223
  dc:	82 bb       	out	0x12, r24	; 18
  de:	82 b3       	in	r24, 0x12	; 18
  e0:	80 61       	ori	r24, 0x10	; 16
  e2:	82 bb       	out	0x12, r24	; 18
  e4:	82 b3       	in	r24, 0x12	; 18
  e6:	80 64       	ori	r24, 0x40	; 64
  e8:	82 bb       	out	0x12, r24	; 18
  ea:	c0 df       	rcall	.-128    	; 0x6c <wait_PD>
  ec:	82 b3       	in	r24, 0x12	; 18
  ee:	8f 7b       	andi	r24, 0xBF	; 191
  f0:	82 bb       	out	0x12, r24	; 18
  f2:	bc df       	rcall	.-136    	; 0x6c <wait_PD>
  f4:	82 b3       	in	r24, 0x12	; 18
  f6:	80 7f       	andi	r24, 0xF0	; 240
  f8:	cf 70       	andi	r28, 0x0F	; 15
  fa:	c8 2b       	or	r28, r24
  fc:	c2 bb       	out	0x12, r28	; 18
  fe:	82 b3       	in	r24, 0x12	; 18
 100:	80 64       	ori	r24, 0x40	; 64
 102:	82 bb       	out	0x12, r24	; 18
 104:	b3 df       	rcall	.-154    	; 0x6c <wait_PD>
 106:	82 b3       	in	r24, 0x12	; 18
 108:	8f 7b       	andi	r24, 0xBF	; 191
 10a:	82 bb       	out	0x12, r24	; 18
 10c:	af df       	rcall	.-162    	; 0x6c <wait_PD>
 10e:	cf 91       	pop	r28
 110:	08 95       	ret

00000112 <lcdInit_PD>:
 112:	8f ef       	ldi	r24, 0xFF	; 255
 114:	81 bb       	out	0x11, r24	; 17
 116:	82 b3       	in	r24, 0x12	; 18
 118:	8f 7b       	andi	r24, 0xBF	; 191
 11a:	82 bb       	out	0x12, r24	; 18
 11c:	8d e0       	ldi	r24, 0x0D	; 13
 11e:	8a 95       	dec	r24
 120:	f1 f7       	brne	.-4      	; 0x11e <lcdInit_PD+0xc>
 122:	00 00       	nop
 124:	83 e3       	ldi	r24, 0x33	; 51
 126:	a9 df       	rcall	.-174    	; 0x7a <lcdCommand_PD>
 128:	8d e0       	ldi	r24, 0x0D	; 13
 12a:	8a 95       	dec	r24
 12c:	f1 f7       	brne	.-4      	; 0x12a <lcdInit_PD+0x18>
 12e:	00 00       	nop
 130:	82 e3       	ldi	r24, 0x32	; 50
 132:	a3 df       	rcall	.-186    	; 0x7a <lcdCommand_PD>
 134:	8d e0       	ldi	r24, 0x0D	; 13
 136:	8a 95       	dec	r24
 138:	f1 f7       	brne	.-4      	; 0x136 <lcdInit_PD+0x24>
 13a:	00 00       	nop
 13c:	88 e2       	ldi	r24, 0x28	; 40
 13e:	9d df       	rcall	.-198    	; 0x7a <lcdCommand_PD>
 140:	8d e0       	ldi	r24, 0x0D	; 13
 142:	8a 95       	dec	r24
 144:	f1 f7       	brne	.-4      	; 0x142 <lcdInit_PD+0x30>
 146:	00 00       	nop
 148:	8c e0       	ldi	r24, 0x0C	; 12
 14a:	97 df       	rcall	.-210    	; 0x7a <lcdCommand_PD>
 14c:	8d e0       	ldi	r24, 0x0D	; 13
 14e:	8a 95       	dec	r24
 150:	f1 f7       	brne	.-4      	; 0x14e <lcdInit_PD+0x3c>
 152:	00 00       	nop
 154:	81 e0       	ldi	r24, 0x01	; 1
 156:	91 df       	rcall	.-222    	; 0x7a <lcdCommand_PD>
 158:	8d e0       	ldi	r24, 0x0D	; 13
 15a:	8a 95       	dec	r24
 15c:	f1 f7       	brne	.-4      	; 0x15a <lcdInit_PD+0x48>
 15e:	00 00       	nop
 160:	86 e0       	ldi	r24, 0x06	; 6
 162:	8b df       	rcall	.-234    	; 0x7a <lcdCommand_PD>
 164:	8d e0       	ldi	r24, 0x0D	; 13
 166:	8a 95       	dec	r24
 168:	f1 f7       	brne	.-4      	; 0x166 <lcdInit_PD+0x54>
 16a:	00 00       	nop
 16c:	08 95       	ret

0000016e <lcdSetCursor_PD>:
}
void lcdSetCursor_PD(unsigned char x,unsigned char y)
{
 16e:	cf 93       	push	r28
 170:	df 93       	push	r29
 172:	00 d0       	rcall	.+0      	; 0x174 <lcdSetCursor_PD+0x6>
 174:	00 d0       	rcall	.+0      	; 0x176 <lcdSetCursor_PD+0x8>
 176:	cd b7       	in	r28, 0x3d	; 61
 178:	de b7       	in	r29, 0x3e	; 62
	unsigned char firstCharAdr[] = { 0x80 , 0xC0 , 0x94 , 0xD4 };
 17a:	90 e8       	ldi	r25, 0x80	; 128
 17c:	99 83       	std	Y+1, r25	; 0x01
 17e:	90 ec       	ldi	r25, 0xC0	; 192
 180:	9a 83       	std	Y+2, r25	; 0x02
 182:	94 e9       	ldi	r25, 0x94	; 148
 184:	9b 83       	std	Y+3, r25	; 0x03
 186:	94 ed       	ldi	r25, 0xD4	; 212
 188:	9c 83       	std	Y+4, r25	; 0x04
	
	lcdCommand_PD(firstCharAdr[y]+x);
 18a:	e1 e0       	ldi	r30, 0x01	; 1
 18c:	f0 e0       	ldi	r31, 0x00	; 0
 18e:	ec 0f       	add	r30, r28
 190:	fd 1f       	adc	r31, r29
 192:	e6 0f       	add	r30, r22
 194:	f1 1d       	adc	r31, r1
 196:	90 81       	ld	r25, Z
 198:	89 0f       	add	r24, r25
 19a:	6f df       	rcall	.-290    	; 0x7a <lcdCommand_PD>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 19c:	8d e0       	ldi	r24, 0x0D	; 13
 19e:	8a 95       	dec	r24
 1a0:	f1 f7       	brne	.-4      	; 0x19e <lcdSetCursor_PD+0x30>
 1a2:	00 00       	nop
	
	_delay_us(5);
}
 1a4:	0f 90       	pop	r0
 1a6:	0f 90       	pop	r0
 1a8:	0f 90       	pop	r0
 1aa:	0f 90       	pop	r0
 1ac:	df 91       	pop	r29
 1ae:	cf 91       	pop	r28
 1b0:	08 95       	ret

000001b2 <lcdPrint_PD>:
void lcdPrint_PD(char *str)
{
 1b2:	0f 93       	push	r16
 1b4:	1f 93       	push	r17
 1b6:	cf 93       	push	r28
 1b8:	8c 01       	movw	r16, r24
	unsigned char i = 0;
 1ba:	c0 e0       	ldi	r28, 0x00	; 0
	while(str[i] !=0)
 1bc:	02 c0       	rjmp	.+4      	; 0x1c2 <lcdPrint_PD+0x10>
	{
		lcdData_PD(str[i]);
 1be:	83 df       	rcall	.-250    	; 0xc6 <lcdData_PD>
		i++;
 1c0:	cf 5f       	subi	r28, 0xFF	; 255
	_delay_us(5);
}
void lcdPrint_PD(char *str)
{
	unsigned char i = 0;
	while(str[i] !=0)
 1c2:	f8 01       	movw	r30, r16
 1c4:	ec 0f       	add	r30, r28
 1c6:	f1 1d       	adc	r31, r1
 1c8:	80 81       	ld	r24, Z
 1ca:	81 11       	cpse	r24, r1
 1cc:	f8 cf       	rjmp	.-16     	; 0x1be <lcdPrint_PD+0xc>
	{
		lcdData_PD(str[i]);
		i++;
	}
}
 1ce:	cf 91       	pop	r28
 1d0:	1f 91       	pop	r17
 1d2:	0f 91       	pop	r16
 1d4:	08 95       	ret

000001d6 <lcdPrintWithCursor_PD>:
void lcdPrintWithCursor_PD(unsigned char x,unsigned char y,char *str)
{
 1d6:	cf 93       	push	r28
 1d8:	df 93       	push	r29
 1da:	ea 01       	movw	r28, r20
	lcdSetCursor_PD(x,y);
 1dc:	c8 df       	rcall	.-112    	; 0x16e <lcdSetCursor_PD>
	lcdPrint_PD(str);
 1de:	ce 01       	movw	r24, r28
 1e0:	e8 df       	rcall	.-48     	; 0x1b2 <lcdPrint_PD>
}
 1e2:	df 91       	pop	r29
 1e4:	cf 91       	pop	r28
 1e6:	08 95       	ret

000001e8 <main>:
{
	// Create variables to hold adc0 and adc1
	uint16_t adc0 = 0 , adc1 = 0;
	
	// PC0 and PC1 are used as input
	DDRC &= ~(1 << 0 | 1 << 1);
 1e8:	84 b3       	in	r24, 0x14	; 20
 1ea:	8c 7f       	andi	r24, 0xFC	; 252
 1ec:	84 bb       	out	0x14, r24	; 20
	
	// Init for adc
	adcInit();
 1ee:	2f df       	rcall	.-418    	; 0x4e <adcInit>
	
	// Init for lcd uses PD region
	lcdInit_PD();
 1f0:	90 df       	rcall	.-224    	; 0x112 <lcdInit_PD>
	
	while (1)	
	{
		// Read adc on pin PC0
		adc0 = adcRead(0);
 1f2:	80 e0       	ldi	r24, 0x00	; 0
 1f4:	30 df       	rcall	.-416    	; 0x56 <adcRead>
 1f6:	8c 01       	movw	r16, r24
		// Read adc on pin PC1
		adc1 = adcRead(1);
 1f8:	81 e0       	ldi	r24, 0x01	; 1
 1fa:	2d df       	rcall	.-422    	; 0x56 <adcRead>
 1fc:	ec 01       	movw	r28, r24
		
		// print "adc0 = " in x = 0 , y = 0
		lcdPrintWithCursor_PD(0, 0, "adc0 = ");
 1fe:	40 e6       	ldi	r20, 0x60	; 96
 200:	50 e0       	ldi	r21, 0x00	; 0
 202:	60 e0       	ldi	r22, 0x00	; 0
 204:	80 e0       	ldi	r24, 0x00	; 0
 206:	e7 df       	rcall	.-50     	; 0x1d6 <lcdPrintWithCursor_PD>
		// print value adc0 use IntegerToString, this parameter can only accept strings
		lcdPrint_PD(IntegerToString(adc0));
 208:	c8 01       	movw	r24, r16
 20a:	10 d0       	rcall	.+32     	; 0x22c <IntegerToString>
 20c:	d2 df       	rcall	.-92     	; 0x1b2 <lcdPrint_PD>
		lcdPrint_PD("   ");
 20e:	88 e6       	ldi	r24, 0x68	; 104
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	cf df       	rcall	.-98     	; 0x1b2 <lcdPrint_PD>
		
		// print "adc1 = " in x = 0 , y = 1
		lcdPrintWithCursor_PD(0, 1, "adc1 = ");
 214:	4c e6       	ldi	r20, 0x6C	; 108
 216:	50 e0       	ldi	r21, 0x00	; 0
 218:	61 e0       	ldi	r22, 0x01	; 1
 21a:	80 e0       	ldi	r24, 0x00	; 0
 21c:	dc df       	rcall	.-72     	; 0x1d6 <lcdPrintWithCursor_PD>
		// print value adc1 use IntegerToString, this parameter can only accept strings
		lcdPrint_PD(IntegerToString(adc1));
 21e:	ce 01       	movw	r24, r28
 220:	05 d0       	rcall	.+10     	; 0x22c <IntegerToString>
 222:	c7 df       	rcall	.-114    	; 0x1b2 <lcdPrint_PD>
		lcdPrint_PD("   ");
 224:	88 e6       	ldi	r24, 0x68	; 104
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	c4 df       	rcall	.-120    	; 0x1b2 <lcdPrint_PD>
 22a:	e3 cf       	rjmp	.-58     	; 0x1f2 <main+0xa>

0000022c <IntegerToString>:
#include "toString.h"

char* IntegerToString(int value)
{
 22c:	0f 93       	push	r16
 22e:	1f 93       	push	r17
 230:	cf 93       	push	r28
 232:	df 93       	push	r29
 234:	cd b7       	in	r28, 0x3d	; 61
 236:	de b7       	in	r29, 0x3e	; 62
 238:	cf 5f       	subi	r28, 0xFF	; 255
 23a:	d1 09       	sbc	r29, r1
 23c:	0f b6       	in	r0, 0x3f	; 63
 23e:	f8 94       	cli
 240:	de bf       	out	0x3e, r29	; 62
 242:	0f be       	out	0x3f, r0	; 63
 244:	cd bf       	out	0x3d, r28	; 61
	char buff[255];
	char *string;
	
	sprintf(buff,"%d",value);
 246:	9f 93       	push	r25
 248:	8f 93       	push	r24
 24a:	84 e7       	ldi	r24, 0x74	; 116
 24c:	90 e0       	ldi	r25, 0x00	; 0
 24e:	9f 93       	push	r25
 250:	8f 93       	push	r24
 252:	8e 01       	movw	r16, r28
 254:	0f 5f       	subi	r16, 0xFF	; 255
 256:	1f 4f       	sbci	r17, 0xFF	; 255
 258:	1f 93       	push	r17
 25a:	0f 93       	push	r16
 25c:	13 d0       	rcall	.+38     	; 0x284 <sprintf>
	string=buff;
	return string;
 25e:	0f 90       	pop	r0
 260:	0f 90       	pop	r0
 262:	0f 90       	pop	r0
 264:	0f 90       	pop	r0
 266:	0f 90       	pop	r0
 268:	0f 90       	pop	r0
}
 26a:	c8 01       	movw	r24, r16
 26c:	c1 50       	subi	r28, 0x01	; 1
 26e:	df 4f       	sbci	r29, 0xFF	; 255
 270:	0f b6       	in	r0, 0x3f	; 63
 272:	f8 94       	cli
 274:	de bf       	out	0x3e, r29	; 62
 276:	0f be       	out	0x3f, r0	; 63
 278:	cd bf       	out	0x3d, r28	; 61
 27a:	df 91       	pop	r29
 27c:	cf 91       	pop	r28
 27e:	1f 91       	pop	r17
 280:	0f 91       	pop	r16
 282:	08 95       	ret

00000284 <sprintf>:
 284:	ae e0       	ldi	r26, 0x0E	; 14
 286:	b0 e0       	ldi	r27, 0x00	; 0
 288:	e7 e4       	ldi	r30, 0x47	; 71
 28a:	f1 e0       	ldi	r31, 0x01	; 1
 28c:	aa c2       	rjmp	.+1364   	; 0x7e2 <__prologue_saves__+0x1c>
 28e:	0d 89       	ldd	r16, Y+21	; 0x15
 290:	1e 89       	ldd	r17, Y+22	; 0x16
 292:	86 e0       	ldi	r24, 0x06	; 6
 294:	8c 83       	std	Y+4, r24	; 0x04
 296:	1a 83       	std	Y+2, r17	; 0x02
 298:	09 83       	std	Y+1, r16	; 0x01
 29a:	8f ef       	ldi	r24, 0xFF	; 255
 29c:	9f e7       	ldi	r25, 0x7F	; 127
 29e:	9e 83       	std	Y+6, r25	; 0x06
 2a0:	8d 83       	std	Y+5, r24	; 0x05
 2a2:	ae 01       	movw	r20, r28
 2a4:	47 5e       	subi	r20, 0xE7	; 231
 2a6:	5f 4f       	sbci	r21, 0xFF	; 255
 2a8:	6f 89       	ldd	r22, Y+23	; 0x17
 2aa:	78 8d       	ldd	r23, Y+24	; 0x18
 2ac:	ce 01       	movw	r24, r28
 2ae:	01 96       	adiw	r24, 0x01	; 1
 2b0:	08 d0       	rcall	.+16     	; 0x2c2 <vfprintf>
 2b2:	ef 81       	ldd	r30, Y+7	; 0x07
 2b4:	f8 85       	ldd	r31, Y+8	; 0x08
 2b6:	e0 0f       	add	r30, r16
 2b8:	f1 1f       	adc	r31, r17
 2ba:	10 82       	st	Z, r1
 2bc:	2e 96       	adiw	r28, 0x0e	; 14
 2be:	e4 e0       	ldi	r30, 0x04	; 4
 2c0:	ac c2       	rjmp	.+1368   	; 0x81a <__epilogue_restores__+0x1c>

000002c2 <vfprintf>:
 2c2:	ab e0       	ldi	r26, 0x0B	; 11
 2c4:	b0 e0       	ldi	r27, 0x00	; 0
 2c6:	e6 e6       	ldi	r30, 0x66	; 102
 2c8:	f1 e0       	ldi	r31, 0x01	; 1
 2ca:	7d c2       	rjmp	.+1274   	; 0x7c6 <__prologue_saves__>
 2cc:	6c 01       	movw	r12, r24
 2ce:	7b 01       	movw	r14, r22
 2d0:	8a 01       	movw	r16, r20
 2d2:	fc 01       	movw	r30, r24
 2d4:	17 82       	std	Z+7, r1	; 0x07
 2d6:	16 82       	std	Z+6, r1	; 0x06
 2d8:	83 81       	ldd	r24, Z+3	; 0x03
 2da:	81 ff       	sbrs	r24, 1
 2dc:	bf c1       	rjmp	.+894    	; 0x65c <__stack+0x1fd>
 2de:	ce 01       	movw	r24, r28
 2e0:	01 96       	adiw	r24, 0x01	; 1
 2e2:	3c 01       	movw	r6, r24
 2e4:	f6 01       	movw	r30, r12
 2e6:	93 81       	ldd	r25, Z+3	; 0x03
 2e8:	f7 01       	movw	r30, r14
 2ea:	93 fd       	sbrc	r25, 3
 2ec:	85 91       	lpm	r24, Z+
 2ee:	93 ff       	sbrs	r25, 3
 2f0:	81 91       	ld	r24, Z+
 2f2:	7f 01       	movw	r14, r30
 2f4:	88 23       	and	r24, r24
 2f6:	09 f4       	brne	.+2      	; 0x2fa <vfprintf+0x38>
 2f8:	ad c1       	rjmp	.+858    	; 0x654 <__stack+0x1f5>
 2fa:	85 32       	cpi	r24, 0x25	; 37
 2fc:	39 f4       	brne	.+14     	; 0x30c <vfprintf+0x4a>
 2fe:	93 fd       	sbrc	r25, 3
 300:	85 91       	lpm	r24, Z+
 302:	93 ff       	sbrs	r25, 3
 304:	81 91       	ld	r24, Z+
 306:	7f 01       	movw	r14, r30
 308:	85 32       	cpi	r24, 0x25	; 37
 30a:	21 f4       	brne	.+8      	; 0x314 <vfprintf+0x52>
 30c:	b6 01       	movw	r22, r12
 30e:	90 e0       	ldi	r25, 0x00	; 0
 310:	c0 d1       	rcall	.+896    	; 0x692 <fputc>
 312:	e8 cf       	rjmp	.-48     	; 0x2e4 <vfprintf+0x22>
 314:	91 2c       	mov	r9, r1
 316:	21 2c       	mov	r2, r1
 318:	31 2c       	mov	r3, r1
 31a:	ff e1       	ldi	r31, 0x1F	; 31
 31c:	f3 15       	cp	r31, r3
 31e:	d8 f0       	brcs	.+54     	; 0x356 <vfprintf+0x94>
 320:	8b 32       	cpi	r24, 0x2B	; 43
 322:	79 f0       	breq	.+30     	; 0x342 <vfprintf+0x80>
 324:	38 f4       	brcc	.+14     	; 0x334 <vfprintf+0x72>
 326:	80 32       	cpi	r24, 0x20	; 32
 328:	79 f0       	breq	.+30     	; 0x348 <vfprintf+0x86>
 32a:	83 32       	cpi	r24, 0x23	; 35
 32c:	a1 f4       	brne	.+40     	; 0x356 <vfprintf+0x94>
 32e:	23 2d       	mov	r18, r3
 330:	20 61       	ori	r18, 0x10	; 16
 332:	1d c0       	rjmp	.+58     	; 0x36e <vfprintf+0xac>
 334:	8d 32       	cpi	r24, 0x2D	; 45
 336:	61 f0       	breq	.+24     	; 0x350 <vfprintf+0x8e>
 338:	80 33       	cpi	r24, 0x30	; 48
 33a:	69 f4       	brne	.+26     	; 0x356 <vfprintf+0x94>
 33c:	23 2d       	mov	r18, r3
 33e:	21 60       	ori	r18, 0x01	; 1
 340:	16 c0       	rjmp	.+44     	; 0x36e <vfprintf+0xac>
 342:	83 2d       	mov	r24, r3
 344:	82 60       	ori	r24, 0x02	; 2
 346:	38 2e       	mov	r3, r24
 348:	e3 2d       	mov	r30, r3
 34a:	e4 60       	ori	r30, 0x04	; 4
 34c:	3e 2e       	mov	r3, r30
 34e:	2a c0       	rjmp	.+84     	; 0x3a4 <vfprintf+0xe2>
 350:	f3 2d       	mov	r31, r3
 352:	f8 60       	ori	r31, 0x08	; 8
 354:	1d c0       	rjmp	.+58     	; 0x390 <vfprintf+0xce>
 356:	37 fc       	sbrc	r3, 7
 358:	2d c0       	rjmp	.+90     	; 0x3b4 <vfprintf+0xf2>
 35a:	20 ed       	ldi	r18, 0xD0	; 208
 35c:	28 0f       	add	r18, r24
 35e:	2a 30       	cpi	r18, 0x0A	; 10
 360:	40 f0       	brcs	.+16     	; 0x372 <vfprintf+0xb0>
 362:	8e 32       	cpi	r24, 0x2E	; 46
 364:	b9 f4       	brne	.+46     	; 0x394 <vfprintf+0xd2>
 366:	36 fc       	sbrc	r3, 6
 368:	75 c1       	rjmp	.+746    	; 0x654 <__stack+0x1f5>
 36a:	23 2d       	mov	r18, r3
 36c:	20 64       	ori	r18, 0x40	; 64
 36e:	32 2e       	mov	r3, r18
 370:	19 c0       	rjmp	.+50     	; 0x3a4 <vfprintf+0xe2>
 372:	36 fe       	sbrs	r3, 6
 374:	06 c0       	rjmp	.+12     	; 0x382 <vfprintf+0xc0>
 376:	8a e0       	ldi	r24, 0x0A	; 10
 378:	98 9e       	mul	r9, r24
 37a:	20 0d       	add	r18, r0
 37c:	11 24       	eor	r1, r1
 37e:	92 2e       	mov	r9, r18
 380:	11 c0       	rjmp	.+34     	; 0x3a4 <vfprintf+0xe2>
 382:	ea e0       	ldi	r30, 0x0A	; 10
 384:	2e 9e       	mul	r2, r30
 386:	20 0d       	add	r18, r0
 388:	11 24       	eor	r1, r1
 38a:	22 2e       	mov	r2, r18
 38c:	f3 2d       	mov	r31, r3
 38e:	f0 62       	ori	r31, 0x20	; 32
 390:	3f 2e       	mov	r3, r31
 392:	08 c0       	rjmp	.+16     	; 0x3a4 <vfprintf+0xe2>
 394:	8c 36       	cpi	r24, 0x6C	; 108
 396:	21 f4       	brne	.+8      	; 0x3a0 <vfprintf+0xde>
 398:	83 2d       	mov	r24, r3
 39a:	80 68       	ori	r24, 0x80	; 128
 39c:	38 2e       	mov	r3, r24
 39e:	02 c0       	rjmp	.+4      	; 0x3a4 <vfprintf+0xe2>
 3a0:	88 36       	cpi	r24, 0x68	; 104
 3a2:	41 f4       	brne	.+16     	; 0x3b4 <vfprintf+0xf2>
 3a4:	f7 01       	movw	r30, r14
 3a6:	93 fd       	sbrc	r25, 3
 3a8:	85 91       	lpm	r24, Z+
 3aa:	93 ff       	sbrs	r25, 3
 3ac:	81 91       	ld	r24, Z+
 3ae:	7f 01       	movw	r14, r30
 3b0:	81 11       	cpse	r24, r1
 3b2:	b3 cf       	rjmp	.-154    	; 0x31a <vfprintf+0x58>
 3b4:	98 2f       	mov	r25, r24
 3b6:	9f 7d       	andi	r25, 0xDF	; 223
 3b8:	95 54       	subi	r25, 0x45	; 69
 3ba:	93 30       	cpi	r25, 0x03	; 3
 3bc:	28 f4       	brcc	.+10     	; 0x3c8 <vfprintf+0x106>
 3be:	0c 5f       	subi	r16, 0xFC	; 252
 3c0:	1f 4f       	sbci	r17, 0xFF	; 255
 3c2:	9f e3       	ldi	r25, 0x3F	; 63
 3c4:	99 83       	std	Y+1, r25	; 0x01
 3c6:	0d c0       	rjmp	.+26     	; 0x3e2 <vfprintf+0x120>
 3c8:	83 36       	cpi	r24, 0x63	; 99
 3ca:	31 f0       	breq	.+12     	; 0x3d8 <vfprintf+0x116>
 3cc:	83 37       	cpi	r24, 0x73	; 115
 3ce:	71 f0       	breq	.+28     	; 0x3ec <vfprintf+0x12a>
 3d0:	83 35       	cpi	r24, 0x53	; 83
 3d2:	09 f0       	breq	.+2      	; 0x3d6 <vfprintf+0x114>
 3d4:	55 c0       	rjmp	.+170    	; 0x480 <__stack+0x21>
 3d6:	20 c0       	rjmp	.+64     	; 0x418 <__DATA_REGION_LENGTH__+0x18>
 3d8:	f8 01       	movw	r30, r16
 3da:	80 81       	ld	r24, Z
 3dc:	89 83       	std	Y+1, r24	; 0x01
 3de:	0e 5f       	subi	r16, 0xFE	; 254
 3e0:	1f 4f       	sbci	r17, 0xFF	; 255
 3e2:	88 24       	eor	r8, r8
 3e4:	83 94       	inc	r8
 3e6:	91 2c       	mov	r9, r1
 3e8:	53 01       	movw	r10, r6
 3ea:	12 c0       	rjmp	.+36     	; 0x410 <__DATA_REGION_LENGTH__+0x10>
 3ec:	28 01       	movw	r4, r16
 3ee:	f2 e0       	ldi	r31, 0x02	; 2
 3f0:	4f 0e       	add	r4, r31
 3f2:	51 1c       	adc	r5, r1
 3f4:	f8 01       	movw	r30, r16
 3f6:	a0 80       	ld	r10, Z
 3f8:	b1 80       	ldd	r11, Z+1	; 0x01
 3fa:	36 fe       	sbrs	r3, 6
 3fc:	03 c0       	rjmp	.+6      	; 0x404 <__DATA_REGION_LENGTH__+0x4>
 3fe:	69 2d       	mov	r22, r9
 400:	70 e0       	ldi	r23, 0x00	; 0
 402:	02 c0       	rjmp	.+4      	; 0x408 <__DATA_REGION_LENGTH__+0x8>
 404:	6f ef       	ldi	r22, 0xFF	; 255
 406:	7f ef       	ldi	r23, 0xFF	; 255
 408:	c5 01       	movw	r24, r10
 40a:	38 d1       	rcall	.+624    	; 0x67c <strnlen>
 40c:	4c 01       	movw	r8, r24
 40e:	82 01       	movw	r16, r4
 410:	f3 2d       	mov	r31, r3
 412:	ff 77       	andi	r31, 0x7F	; 127
 414:	3f 2e       	mov	r3, r31
 416:	15 c0       	rjmp	.+42     	; 0x442 <__DATA_REGION_LENGTH__+0x42>
 418:	28 01       	movw	r4, r16
 41a:	22 e0       	ldi	r18, 0x02	; 2
 41c:	42 0e       	add	r4, r18
 41e:	51 1c       	adc	r5, r1
 420:	f8 01       	movw	r30, r16
 422:	a0 80       	ld	r10, Z
 424:	b1 80       	ldd	r11, Z+1	; 0x01
 426:	36 fe       	sbrs	r3, 6
 428:	03 c0       	rjmp	.+6      	; 0x430 <__DATA_REGION_LENGTH__+0x30>
 42a:	69 2d       	mov	r22, r9
 42c:	70 e0       	ldi	r23, 0x00	; 0
 42e:	02 c0       	rjmp	.+4      	; 0x434 <__DATA_REGION_LENGTH__+0x34>
 430:	6f ef       	ldi	r22, 0xFF	; 255
 432:	7f ef       	ldi	r23, 0xFF	; 255
 434:	c5 01       	movw	r24, r10
 436:	17 d1       	rcall	.+558    	; 0x666 <strnlen_P>
 438:	4c 01       	movw	r8, r24
 43a:	f3 2d       	mov	r31, r3
 43c:	f0 68       	ori	r31, 0x80	; 128
 43e:	3f 2e       	mov	r3, r31
 440:	82 01       	movw	r16, r4
 442:	33 fc       	sbrc	r3, 3
 444:	19 c0       	rjmp	.+50     	; 0x478 <__stack+0x19>
 446:	82 2d       	mov	r24, r2
 448:	90 e0       	ldi	r25, 0x00	; 0
 44a:	88 16       	cp	r8, r24
 44c:	99 06       	cpc	r9, r25
 44e:	a0 f4       	brcc	.+40     	; 0x478 <__stack+0x19>
 450:	b6 01       	movw	r22, r12
 452:	80 e2       	ldi	r24, 0x20	; 32
 454:	90 e0       	ldi	r25, 0x00	; 0
 456:	1d d1       	rcall	.+570    	; 0x692 <fputc>
 458:	2a 94       	dec	r2
 45a:	f5 cf       	rjmp	.-22     	; 0x446 <__DATA_REGION_LENGTH__+0x46>
 45c:	f5 01       	movw	r30, r10
 45e:	37 fc       	sbrc	r3, 7
 460:	85 91       	lpm	r24, Z+
 462:	37 fe       	sbrs	r3, 7
 464:	81 91       	ld	r24, Z+
 466:	5f 01       	movw	r10, r30
 468:	b6 01       	movw	r22, r12
 46a:	90 e0       	ldi	r25, 0x00	; 0
 46c:	12 d1       	rcall	.+548    	; 0x692 <fputc>
 46e:	21 10       	cpse	r2, r1
 470:	2a 94       	dec	r2
 472:	21 e0       	ldi	r18, 0x01	; 1
 474:	82 1a       	sub	r8, r18
 476:	91 08       	sbc	r9, r1
 478:	81 14       	cp	r8, r1
 47a:	91 04       	cpc	r9, r1
 47c:	79 f7       	brne	.-34     	; 0x45c <__DATA_REGION_LENGTH__+0x5c>
 47e:	e1 c0       	rjmp	.+450    	; 0x642 <__stack+0x1e3>
 480:	84 36       	cpi	r24, 0x64	; 100
 482:	11 f0       	breq	.+4      	; 0x488 <__stack+0x29>
 484:	89 36       	cpi	r24, 0x69	; 105
 486:	39 f5       	brne	.+78     	; 0x4d6 <__stack+0x77>
 488:	f8 01       	movw	r30, r16
 48a:	37 fe       	sbrs	r3, 7
 48c:	07 c0       	rjmp	.+14     	; 0x49c <__stack+0x3d>
 48e:	60 81       	ld	r22, Z
 490:	71 81       	ldd	r23, Z+1	; 0x01
 492:	82 81       	ldd	r24, Z+2	; 0x02
 494:	93 81       	ldd	r25, Z+3	; 0x03
 496:	0c 5f       	subi	r16, 0xFC	; 252
 498:	1f 4f       	sbci	r17, 0xFF	; 255
 49a:	08 c0       	rjmp	.+16     	; 0x4ac <__stack+0x4d>
 49c:	60 81       	ld	r22, Z
 49e:	71 81       	ldd	r23, Z+1	; 0x01
 4a0:	07 2e       	mov	r0, r23
 4a2:	00 0c       	add	r0, r0
 4a4:	88 0b       	sbc	r24, r24
 4a6:	99 0b       	sbc	r25, r25
 4a8:	0e 5f       	subi	r16, 0xFE	; 254
 4aa:	1f 4f       	sbci	r17, 0xFF	; 255
 4ac:	f3 2d       	mov	r31, r3
 4ae:	ff 76       	andi	r31, 0x6F	; 111
 4b0:	3f 2e       	mov	r3, r31
 4b2:	97 ff       	sbrs	r25, 7
 4b4:	09 c0       	rjmp	.+18     	; 0x4c8 <__stack+0x69>
 4b6:	90 95       	com	r25
 4b8:	80 95       	com	r24
 4ba:	70 95       	com	r23
 4bc:	61 95       	neg	r22
 4be:	7f 4f       	sbci	r23, 0xFF	; 255
 4c0:	8f 4f       	sbci	r24, 0xFF	; 255
 4c2:	9f 4f       	sbci	r25, 0xFF	; 255
 4c4:	f0 68       	ori	r31, 0x80	; 128
 4c6:	3f 2e       	mov	r3, r31
 4c8:	2a e0       	ldi	r18, 0x0A	; 10
 4ca:	30 e0       	ldi	r19, 0x00	; 0
 4cc:	a3 01       	movw	r20, r6
 4ce:	1d d1       	rcall	.+570    	; 0x70a <__ultoa_invert>
 4d0:	88 2e       	mov	r8, r24
 4d2:	86 18       	sub	r8, r6
 4d4:	44 c0       	rjmp	.+136    	; 0x55e <__stack+0xff>
 4d6:	85 37       	cpi	r24, 0x75	; 117
 4d8:	31 f4       	brne	.+12     	; 0x4e6 <__stack+0x87>
 4da:	23 2d       	mov	r18, r3
 4dc:	2f 7e       	andi	r18, 0xEF	; 239
 4de:	b2 2e       	mov	r11, r18
 4e0:	2a e0       	ldi	r18, 0x0A	; 10
 4e2:	30 e0       	ldi	r19, 0x00	; 0
 4e4:	25 c0       	rjmp	.+74     	; 0x530 <__stack+0xd1>
 4e6:	93 2d       	mov	r25, r3
 4e8:	99 7f       	andi	r25, 0xF9	; 249
 4ea:	b9 2e       	mov	r11, r25
 4ec:	8f 36       	cpi	r24, 0x6F	; 111
 4ee:	c1 f0       	breq	.+48     	; 0x520 <__stack+0xc1>
 4f0:	18 f4       	brcc	.+6      	; 0x4f8 <__stack+0x99>
 4f2:	88 35       	cpi	r24, 0x58	; 88
 4f4:	79 f0       	breq	.+30     	; 0x514 <__stack+0xb5>
 4f6:	ae c0       	rjmp	.+348    	; 0x654 <__stack+0x1f5>
 4f8:	80 37       	cpi	r24, 0x70	; 112
 4fa:	19 f0       	breq	.+6      	; 0x502 <__stack+0xa3>
 4fc:	88 37       	cpi	r24, 0x78	; 120
 4fe:	21 f0       	breq	.+8      	; 0x508 <__stack+0xa9>
 500:	a9 c0       	rjmp	.+338    	; 0x654 <__stack+0x1f5>
 502:	e9 2f       	mov	r30, r25
 504:	e0 61       	ori	r30, 0x10	; 16
 506:	be 2e       	mov	r11, r30
 508:	b4 fe       	sbrs	r11, 4
 50a:	0d c0       	rjmp	.+26     	; 0x526 <__stack+0xc7>
 50c:	fb 2d       	mov	r31, r11
 50e:	f4 60       	ori	r31, 0x04	; 4
 510:	bf 2e       	mov	r11, r31
 512:	09 c0       	rjmp	.+18     	; 0x526 <__stack+0xc7>
 514:	34 fe       	sbrs	r3, 4
 516:	0a c0       	rjmp	.+20     	; 0x52c <__stack+0xcd>
 518:	29 2f       	mov	r18, r25
 51a:	26 60       	ori	r18, 0x06	; 6
 51c:	b2 2e       	mov	r11, r18
 51e:	06 c0       	rjmp	.+12     	; 0x52c <__stack+0xcd>
 520:	28 e0       	ldi	r18, 0x08	; 8
 522:	30 e0       	ldi	r19, 0x00	; 0
 524:	05 c0       	rjmp	.+10     	; 0x530 <__stack+0xd1>
 526:	20 e1       	ldi	r18, 0x10	; 16
 528:	30 e0       	ldi	r19, 0x00	; 0
 52a:	02 c0       	rjmp	.+4      	; 0x530 <__stack+0xd1>
 52c:	20 e1       	ldi	r18, 0x10	; 16
 52e:	32 e0       	ldi	r19, 0x02	; 2
 530:	f8 01       	movw	r30, r16
 532:	b7 fe       	sbrs	r11, 7
 534:	07 c0       	rjmp	.+14     	; 0x544 <__stack+0xe5>
 536:	60 81       	ld	r22, Z
 538:	71 81       	ldd	r23, Z+1	; 0x01
 53a:	82 81       	ldd	r24, Z+2	; 0x02
 53c:	93 81       	ldd	r25, Z+3	; 0x03
 53e:	0c 5f       	subi	r16, 0xFC	; 252
 540:	1f 4f       	sbci	r17, 0xFF	; 255
 542:	06 c0       	rjmp	.+12     	; 0x550 <__stack+0xf1>
 544:	60 81       	ld	r22, Z
 546:	71 81       	ldd	r23, Z+1	; 0x01
 548:	80 e0       	ldi	r24, 0x00	; 0
 54a:	90 e0       	ldi	r25, 0x00	; 0
 54c:	0e 5f       	subi	r16, 0xFE	; 254
 54e:	1f 4f       	sbci	r17, 0xFF	; 255
 550:	a3 01       	movw	r20, r6
 552:	db d0       	rcall	.+438    	; 0x70a <__ultoa_invert>
 554:	88 2e       	mov	r8, r24
 556:	86 18       	sub	r8, r6
 558:	fb 2d       	mov	r31, r11
 55a:	ff 77       	andi	r31, 0x7F	; 127
 55c:	3f 2e       	mov	r3, r31
 55e:	36 fe       	sbrs	r3, 6
 560:	0d c0       	rjmp	.+26     	; 0x57c <__stack+0x11d>
 562:	23 2d       	mov	r18, r3
 564:	2e 7f       	andi	r18, 0xFE	; 254
 566:	a2 2e       	mov	r10, r18
 568:	89 14       	cp	r8, r9
 56a:	58 f4       	brcc	.+22     	; 0x582 <__stack+0x123>
 56c:	34 fe       	sbrs	r3, 4
 56e:	0b c0       	rjmp	.+22     	; 0x586 <__stack+0x127>
 570:	32 fc       	sbrc	r3, 2
 572:	09 c0       	rjmp	.+18     	; 0x586 <__stack+0x127>
 574:	83 2d       	mov	r24, r3
 576:	8e 7e       	andi	r24, 0xEE	; 238
 578:	a8 2e       	mov	r10, r24
 57a:	05 c0       	rjmp	.+10     	; 0x586 <__stack+0x127>
 57c:	b8 2c       	mov	r11, r8
 57e:	a3 2c       	mov	r10, r3
 580:	03 c0       	rjmp	.+6      	; 0x588 <__stack+0x129>
 582:	b8 2c       	mov	r11, r8
 584:	01 c0       	rjmp	.+2      	; 0x588 <__stack+0x129>
 586:	b9 2c       	mov	r11, r9
 588:	a4 fe       	sbrs	r10, 4
 58a:	0f c0       	rjmp	.+30     	; 0x5aa <__stack+0x14b>
 58c:	fe 01       	movw	r30, r28
 58e:	e8 0d       	add	r30, r8
 590:	f1 1d       	adc	r31, r1
 592:	80 81       	ld	r24, Z
 594:	80 33       	cpi	r24, 0x30	; 48
 596:	21 f4       	brne	.+8      	; 0x5a0 <__stack+0x141>
 598:	9a 2d       	mov	r25, r10
 59a:	99 7e       	andi	r25, 0xE9	; 233
 59c:	a9 2e       	mov	r10, r25
 59e:	09 c0       	rjmp	.+18     	; 0x5b2 <__stack+0x153>
 5a0:	a2 fe       	sbrs	r10, 2
 5a2:	06 c0       	rjmp	.+12     	; 0x5b0 <__stack+0x151>
 5a4:	b3 94       	inc	r11
 5a6:	b3 94       	inc	r11
 5a8:	04 c0       	rjmp	.+8      	; 0x5b2 <__stack+0x153>
 5aa:	8a 2d       	mov	r24, r10
 5ac:	86 78       	andi	r24, 0x86	; 134
 5ae:	09 f0       	breq	.+2      	; 0x5b2 <__stack+0x153>
 5b0:	b3 94       	inc	r11
 5b2:	a3 fc       	sbrc	r10, 3
 5b4:	10 c0       	rjmp	.+32     	; 0x5d6 <__stack+0x177>
 5b6:	a0 fe       	sbrs	r10, 0
 5b8:	06 c0       	rjmp	.+12     	; 0x5c6 <__stack+0x167>
 5ba:	b2 14       	cp	r11, r2
 5bc:	80 f4       	brcc	.+32     	; 0x5de <__stack+0x17f>
 5be:	28 0c       	add	r2, r8
 5c0:	92 2c       	mov	r9, r2
 5c2:	9b 18       	sub	r9, r11
 5c4:	0d c0       	rjmp	.+26     	; 0x5e0 <__stack+0x181>
 5c6:	b2 14       	cp	r11, r2
 5c8:	58 f4       	brcc	.+22     	; 0x5e0 <__stack+0x181>
 5ca:	b6 01       	movw	r22, r12
 5cc:	80 e2       	ldi	r24, 0x20	; 32
 5ce:	90 e0       	ldi	r25, 0x00	; 0
 5d0:	60 d0       	rcall	.+192    	; 0x692 <fputc>
 5d2:	b3 94       	inc	r11
 5d4:	f8 cf       	rjmp	.-16     	; 0x5c6 <__stack+0x167>
 5d6:	b2 14       	cp	r11, r2
 5d8:	18 f4       	brcc	.+6      	; 0x5e0 <__stack+0x181>
 5da:	2b 18       	sub	r2, r11
 5dc:	02 c0       	rjmp	.+4      	; 0x5e2 <__stack+0x183>
 5de:	98 2c       	mov	r9, r8
 5e0:	21 2c       	mov	r2, r1
 5e2:	a4 fe       	sbrs	r10, 4
 5e4:	0f c0       	rjmp	.+30     	; 0x604 <__stack+0x1a5>
 5e6:	b6 01       	movw	r22, r12
 5e8:	80 e3       	ldi	r24, 0x30	; 48
 5ea:	90 e0       	ldi	r25, 0x00	; 0
 5ec:	52 d0       	rcall	.+164    	; 0x692 <fputc>
 5ee:	a2 fe       	sbrs	r10, 2
 5f0:	16 c0       	rjmp	.+44     	; 0x61e <__stack+0x1bf>
 5f2:	a1 fc       	sbrc	r10, 1
 5f4:	03 c0       	rjmp	.+6      	; 0x5fc <__stack+0x19d>
 5f6:	88 e7       	ldi	r24, 0x78	; 120
 5f8:	90 e0       	ldi	r25, 0x00	; 0
 5fa:	02 c0       	rjmp	.+4      	; 0x600 <__stack+0x1a1>
 5fc:	88 e5       	ldi	r24, 0x58	; 88
 5fe:	90 e0       	ldi	r25, 0x00	; 0
 600:	b6 01       	movw	r22, r12
 602:	0c c0       	rjmp	.+24     	; 0x61c <__stack+0x1bd>
 604:	8a 2d       	mov	r24, r10
 606:	86 78       	andi	r24, 0x86	; 134
 608:	51 f0       	breq	.+20     	; 0x61e <__stack+0x1bf>
 60a:	a1 fe       	sbrs	r10, 1
 60c:	02 c0       	rjmp	.+4      	; 0x612 <__stack+0x1b3>
 60e:	8b e2       	ldi	r24, 0x2B	; 43
 610:	01 c0       	rjmp	.+2      	; 0x614 <__stack+0x1b5>
 612:	80 e2       	ldi	r24, 0x20	; 32
 614:	a7 fc       	sbrc	r10, 7
 616:	8d e2       	ldi	r24, 0x2D	; 45
 618:	b6 01       	movw	r22, r12
 61a:	90 e0       	ldi	r25, 0x00	; 0
 61c:	3a d0       	rcall	.+116    	; 0x692 <fputc>
 61e:	89 14       	cp	r8, r9
 620:	30 f4       	brcc	.+12     	; 0x62e <__stack+0x1cf>
 622:	b6 01       	movw	r22, r12
 624:	80 e3       	ldi	r24, 0x30	; 48
 626:	90 e0       	ldi	r25, 0x00	; 0
 628:	34 d0       	rcall	.+104    	; 0x692 <fputc>
 62a:	9a 94       	dec	r9
 62c:	f8 cf       	rjmp	.-16     	; 0x61e <__stack+0x1bf>
 62e:	8a 94       	dec	r8
 630:	f3 01       	movw	r30, r6
 632:	e8 0d       	add	r30, r8
 634:	f1 1d       	adc	r31, r1
 636:	80 81       	ld	r24, Z
 638:	b6 01       	movw	r22, r12
 63a:	90 e0       	ldi	r25, 0x00	; 0
 63c:	2a d0       	rcall	.+84     	; 0x692 <fputc>
 63e:	81 10       	cpse	r8, r1
 640:	f6 cf       	rjmp	.-20     	; 0x62e <__stack+0x1cf>
 642:	22 20       	and	r2, r2
 644:	09 f4       	brne	.+2      	; 0x648 <__stack+0x1e9>
 646:	4e ce       	rjmp	.-868    	; 0x2e4 <vfprintf+0x22>
 648:	b6 01       	movw	r22, r12
 64a:	80 e2       	ldi	r24, 0x20	; 32
 64c:	90 e0       	ldi	r25, 0x00	; 0
 64e:	21 d0       	rcall	.+66     	; 0x692 <fputc>
 650:	2a 94       	dec	r2
 652:	f7 cf       	rjmp	.-18     	; 0x642 <__stack+0x1e3>
 654:	f6 01       	movw	r30, r12
 656:	86 81       	ldd	r24, Z+6	; 0x06
 658:	97 81       	ldd	r25, Z+7	; 0x07
 65a:	02 c0       	rjmp	.+4      	; 0x660 <__stack+0x201>
 65c:	8f ef       	ldi	r24, 0xFF	; 255
 65e:	9f ef       	ldi	r25, 0xFF	; 255
 660:	2b 96       	adiw	r28, 0x0b	; 11
 662:	e2 e1       	ldi	r30, 0x12	; 18
 664:	cc c0       	rjmp	.+408    	; 0x7fe <__epilogue_restores__>

00000666 <strnlen_P>:
 666:	fc 01       	movw	r30, r24
 668:	05 90       	lpm	r0, Z+
 66a:	61 50       	subi	r22, 0x01	; 1
 66c:	70 40       	sbci	r23, 0x00	; 0
 66e:	01 10       	cpse	r0, r1
 670:	d8 f7       	brcc	.-10     	; 0x668 <strnlen_P+0x2>
 672:	80 95       	com	r24
 674:	90 95       	com	r25
 676:	8e 0f       	add	r24, r30
 678:	9f 1f       	adc	r25, r31
 67a:	08 95       	ret

0000067c <strnlen>:
 67c:	fc 01       	movw	r30, r24
 67e:	61 50       	subi	r22, 0x01	; 1
 680:	70 40       	sbci	r23, 0x00	; 0
 682:	01 90       	ld	r0, Z+
 684:	01 10       	cpse	r0, r1
 686:	d8 f7       	brcc	.-10     	; 0x67e <strnlen+0x2>
 688:	80 95       	com	r24
 68a:	90 95       	com	r25
 68c:	8e 0f       	add	r24, r30
 68e:	9f 1f       	adc	r25, r31
 690:	08 95       	ret

00000692 <fputc>:
 692:	0f 93       	push	r16
 694:	1f 93       	push	r17
 696:	cf 93       	push	r28
 698:	df 93       	push	r29
 69a:	fb 01       	movw	r30, r22
 69c:	23 81       	ldd	r18, Z+3	; 0x03
 69e:	21 fd       	sbrc	r18, 1
 6a0:	03 c0       	rjmp	.+6      	; 0x6a8 <fputc+0x16>
 6a2:	8f ef       	ldi	r24, 0xFF	; 255
 6a4:	9f ef       	ldi	r25, 0xFF	; 255
 6a6:	2c c0       	rjmp	.+88     	; 0x700 <fputc+0x6e>
 6a8:	22 ff       	sbrs	r18, 2
 6aa:	16 c0       	rjmp	.+44     	; 0x6d8 <fputc+0x46>
 6ac:	46 81       	ldd	r20, Z+6	; 0x06
 6ae:	57 81       	ldd	r21, Z+7	; 0x07
 6b0:	24 81       	ldd	r18, Z+4	; 0x04
 6b2:	35 81       	ldd	r19, Z+5	; 0x05
 6b4:	42 17       	cp	r20, r18
 6b6:	53 07       	cpc	r21, r19
 6b8:	44 f4       	brge	.+16     	; 0x6ca <fputc+0x38>
 6ba:	a0 81       	ld	r26, Z
 6bc:	b1 81       	ldd	r27, Z+1	; 0x01
 6be:	9d 01       	movw	r18, r26
 6c0:	2f 5f       	subi	r18, 0xFF	; 255
 6c2:	3f 4f       	sbci	r19, 0xFF	; 255
 6c4:	31 83       	std	Z+1, r19	; 0x01
 6c6:	20 83       	st	Z, r18
 6c8:	8c 93       	st	X, r24
 6ca:	26 81       	ldd	r18, Z+6	; 0x06
 6cc:	37 81       	ldd	r19, Z+7	; 0x07
 6ce:	2f 5f       	subi	r18, 0xFF	; 255
 6d0:	3f 4f       	sbci	r19, 0xFF	; 255
 6d2:	37 83       	std	Z+7, r19	; 0x07
 6d4:	26 83       	std	Z+6, r18	; 0x06
 6d6:	14 c0       	rjmp	.+40     	; 0x700 <fputc+0x6e>
 6d8:	8b 01       	movw	r16, r22
 6da:	ec 01       	movw	r28, r24
 6dc:	fb 01       	movw	r30, r22
 6de:	00 84       	ldd	r0, Z+8	; 0x08
 6e0:	f1 85       	ldd	r31, Z+9	; 0x09
 6e2:	e0 2d       	mov	r30, r0
 6e4:	09 95       	icall
 6e6:	89 2b       	or	r24, r25
 6e8:	e1 f6       	brne	.-72     	; 0x6a2 <fputc+0x10>
 6ea:	d8 01       	movw	r26, r16
 6ec:	16 96       	adiw	r26, 0x06	; 6
 6ee:	8d 91       	ld	r24, X+
 6f0:	9c 91       	ld	r25, X
 6f2:	17 97       	sbiw	r26, 0x07	; 7
 6f4:	01 96       	adiw	r24, 0x01	; 1
 6f6:	17 96       	adiw	r26, 0x07	; 7
 6f8:	9c 93       	st	X, r25
 6fa:	8e 93       	st	-X, r24
 6fc:	16 97       	sbiw	r26, 0x06	; 6
 6fe:	ce 01       	movw	r24, r28
 700:	df 91       	pop	r29
 702:	cf 91       	pop	r28
 704:	1f 91       	pop	r17
 706:	0f 91       	pop	r16
 708:	08 95       	ret

0000070a <__ultoa_invert>:
 70a:	fa 01       	movw	r30, r20
 70c:	aa 27       	eor	r26, r26
 70e:	28 30       	cpi	r18, 0x08	; 8
 710:	51 f1       	breq	.+84     	; 0x766 <__ultoa_invert+0x5c>
 712:	20 31       	cpi	r18, 0x10	; 16
 714:	81 f1       	breq	.+96     	; 0x776 <__ultoa_invert+0x6c>
 716:	e8 94       	clt
 718:	6f 93       	push	r22
 71a:	6e 7f       	andi	r22, 0xFE	; 254
 71c:	6e 5f       	subi	r22, 0xFE	; 254
 71e:	7f 4f       	sbci	r23, 0xFF	; 255
 720:	8f 4f       	sbci	r24, 0xFF	; 255
 722:	9f 4f       	sbci	r25, 0xFF	; 255
 724:	af 4f       	sbci	r26, 0xFF	; 255
 726:	b1 e0       	ldi	r27, 0x01	; 1
 728:	3e d0       	rcall	.+124    	; 0x7a6 <__ultoa_invert+0x9c>
 72a:	b4 e0       	ldi	r27, 0x04	; 4
 72c:	3c d0       	rcall	.+120    	; 0x7a6 <__ultoa_invert+0x9c>
 72e:	67 0f       	add	r22, r23
 730:	78 1f       	adc	r23, r24
 732:	89 1f       	adc	r24, r25
 734:	9a 1f       	adc	r25, r26
 736:	a1 1d       	adc	r26, r1
 738:	68 0f       	add	r22, r24
 73a:	79 1f       	adc	r23, r25
 73c:	8a 1f       	adc	r24, r26
 73e:	91 1d       	adc	r25, r1
 740:	a1 1d       	adc	r26, r1
 742:	6a 0f       	add	r22, r26
 744:	71 1d       	adc	r23, r1
 746:	81 1d       	adc	r24, r1
 748:	91 1d       	adc	r25, r1
 74a:	a1 1d       	adc	r26, r1
 74c:	20 d0       	rcall	.+64     	; 0x78e <__ultoa_invert+0x84>
 74e:	09 f4       	brne	.+2      	; 0x752 <__ultoa_invert+0x48>
 750:	68 94       	set
 752:	3f 91       	pop	r19
 754:	2a e0       	ldi	r18, 0x0A	; 10
 756:	26 9f       	mul	r18, r22
 758:	11 24       	eor	r1, r1
 75a:	30 19       	sub	r19, r0
 75c:	30 5d       	subi	r19, 0xD0	; 208
 75e:	31 93       	st	Z+, r19
 760:	de f6       	brtc	.-74     	; 0x718 <__ultoa_invert+0xe>
 762:	cf 01       	movw	r24, r30
 764:	08 95       	ret
 766:	46 2f       	mov	r20, r22
 768:	47 70       	andi	r20, 0x07	; 7
 76a:	40 5d       	subi	r20, 0xD0	; 208
 76c:	41 93       	st	Z+, r20
 76e:	b3 e0       	ldi	r27, 0x03	; 3
 770:	0f d0       	rcall	.+30     	; 0x790 <__ultoa_invert+0x86>
 772:	c9 f7       	brne	.-14     	; 0x766 <__ultoa_invert+0x5c>
 774:	f6 cf       	rjmp	.-20     	; 0x762 <__ultoa_invert+0x58>
 776:	46 2f       	mov	r20, r22
 778:	4f 70       	andi	r20, 0x0F	; 15
 77a:	40 5d       	subi	r20, 0xD0	; 208
 77c:	4a 33       	cpi	r20, 0x3A	; 58
 77e:	18 f0       	brcs	.+6      	; 0x786 <__ultoa_invert+0x7c>
 780:	49 5d       	subi	r20, 0xD9	; 217
 782:	31 fd       	sbrc	r19, 1
 784:	40 52       	subi	r20, 0x20	; 32
 786:	41 93       	st	Z+, r20
 788:	02 d0       	rcall	.+4      	; 0x78e <__ultoa_invert+0x84>
 78a:	a9 f7       	brne	.-22     	; 0x776 <__ultoa_invert+0x6c>
 78c:	ea cf       	rjmp	.-44     	; 0x762 <__ultoa_invert+0x58>
 78e:	b4 e0       	ldi	r27, 0x04	; 4
 790:	a6 95       	lsr	r26
 792:	97 95       	ror	r25
 794:	87 95       	ror	r24
 796:	77 95       	ror	r23
 798:	67 95       	ror	r22
 79a:	ba 95       	dec	r27
 79c:	c9 f7       	brne	.-14     	; 0x790 <__ultoa_invert+0x86>
 79e:	00 97       	sbiw	r24, 0x00	; 0
 7a0:	61 05       	cpc	r22, r1
 7a2:	71 05       	cpc	r23, r1
 7a4:	08 95       	ret
 7a6:	9b 01       	movw	r18, r22
 7a8:	ac 01       	movw	r20, r24
 7aa:	0a 2e       	mov	r0, r26
 7ac:	06 94       	lsr	r0
 7ae:	57 95       	ror	r21
 7b0:	47 95       	ror	r20
 7b2:	37 95       	ror	r19
 7b4:	27 95       	ror	r18
 7b6:	ba 95       	dec	r27
 7b8:	c9 f7       	brne	.-14     	; 0x7ac <__ultoa_invert+0xa2>
 7ba:	62 0f       	add	r22, r18
 7bc:	73 1f       	adc	r23, r19
 7be:	84 1f       	adc	r24, r20
 7c0:	95 1f       	adc	r25, r21
 7c2:	a0 1d       	adc	r26, r0
 7c4:	08 95       	ret

000007c6 <__prologue_saves__>:
 7c6:	2f 92       	push	r2
 7c8:	3f 92       	push	r3
 7ca:	4f 92       	push	r4
 7cc:	5f 92       	push	r5
 7ce:	6f 92       	push	r6
 7d0:	7f 92       	push	r7
 7d2:	8f 92       	push	r8
 7d4:	9f 92       	push	r9
 7d6:	af 92       	push	r10
 7d8:	bf 92       	push	r11
 7da:	cf 92       	push	r12
 7dc:	df 92       	push	r13
 7de:	ef 92       	push	r14
 7e0:	ff 92       	push	r15
 7e2:	0f 93       	push	r16
 7e4:	1f 93       	push	r17
 7e6:	cf 93       	push	r28
 7e8:	df 93       	push	r29
 7ea:	cd b7       	in	r28, 0x3d	; 61
 7ec:	de b7       	in	r29, 0x3e	; 62
 7ee:	ca 1b       	sub	r28, r26
 7f0:	db 0b       	sbc	r29, r27
 7f2:	0f b6       	in	r0, 0x3f	; 63
 7f4:	f8 94       	cli
 7f6:	de bf       	out	0x3e, r29	; 62
 7f8:	0f be       	out	0x3f, r0	; 63
 7fa:	cd bf       	out	0x3d, r28	; 61
 7fc:	09 94       	ijmp

000007fe <__epilogue_restores__>:
 7fe:	2a 88       	ldd	r2, Y+18	; 0x12
 800:	39 88       	ldd	r3, Y+17	; 0x11
 802:	48 88       	ldd	r4, Y+16	; 0x10
 804:	5f 84       	ldd	r5, Y+15	; 0x0f
 806:	6e 84       	ldd	r6, Y+14	; 0x0e
 808:	7d 84       	ldd	r7, Y+13	; 0x0d
 80a:	8c 84       	ldd	r8, Y+12	; 0x0c
 80c:	9b 84       	ldd	r9, Y+11	; 0x0b
 80e:	aa 84       	ldd	r10, Y+10	; 0x0a
 810:	b9 84       	ldd	r11, Y+9	; 0x09
 812:	c8 84       	ldd	r12, Y+8	; 0x08
 814:	df 80       	ldd	r13, Y+7	; 0x07
 816:	ee 80       	ldd	r14, Y+6	; 0x06
 818:	fd 80       	ldd	r15, Y+5	; 0x05
 81a:	0c 81       	ldd	r16, Y+4	; 0x04
 81c:	1b 81       	ldd	r17, Y+3	; 0x03
 81e:	aa 81       	ldd	r26, Y+2	; 0x02
 820:	b9 81       	ldd	r27, Y+1	; 0x01
 822:	ce 0f       	add	r28, r30
 824:	d1 1d       	adc	r29, r1
 826:	0f b6       	in	r0, 0x3f	; 63
 828:	f8 94       	cli
 82a:	de bf       	out	0x3e, r29	; 62
 82c:	0f be       	out	0x3f, r0	; 63
 82e:	cd bf       	out	0x3d, r28	; 61
 830:	ed 01       	movw	r28, r26
 832:	08 95       	ret

00000834 <_exit>:
 834:	f8 94       	cli

00000836 <__stop_program>:
 836:	ff cf       	rjmp	.-2      	; 0x836 <__stop_program>
